/**---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  * DAG : 방향성이 있으나 사이클이 존재하지 않는 그래프 [Directed Acyclic Graph] 
  * Topological Sort : 작업의 순서가 정해져 있을 때 순서에 맞게 정렬하는 알고리즘 
		- Indegree : 특정 정점으로 들어오는 간선 
		- Outdegree : 특정 정점에서 나가는 간선 
	
		=> Indegree 가 0 인 정점들을 모두 queue 에 입력 후 그래프 정보를 이용하여 BFS 탐색
			(BFS 와 유사하나 방문의 유무가 아닌 Indegree 정보가 0 이면 queue 에 입력하는 방식) 

  * CPM : 작업의 순서 및 경과 시간이 주어질 때 모든 작업을 수행하는데 필요한 최소한의 시간을 구하는 알고리즘
			, 위상정렬을 이용하며 각 정점에서는 최대값을 저장 
  
  * Critical Path: 전체 작업 중 가장 오랜기간을 사용하는 작업 경로
		- 위상정렬을 이용하여 각 정점에 대한 최대값 [Store] 을 저장
		- 기존 그래프의 간선을 반대로 저장한 그래프를 생성
		- 두 정점의 Store 차와 정점사이의 간선 가중치가 동일하지 않으면 해당 경로는 포함 x
		- 두 정점의 Store 차와 정점사이의 간선 가중치가 동일하면서 두 정점 중 시작정점이 경로에 포함되는 정점이면 해당 경로는 포함 o, 포함되는 정점이 아니라면 해당 경로는 포함 x 
  *---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

for (int i = 0; i < N; i++)
	if (Indegree[i] == 0)
		q.push(i);

while (q.empty() != 1)
{
	int v = q.front();
	q.pop();

	for (int i = 0; i < G[v].size(); i++)
	{
		Indegree[G[v][i]]--;

		if (Indegree[G[v][i]] == 0)
			q.push(Indegree[G[v][i]]);
	}
}