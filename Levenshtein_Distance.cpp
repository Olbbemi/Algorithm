/**-------------------------------------------------------------------------------------------------------------
  * Levenshtien_Distance (편집 거리 알고리즘) : 임의 두 문자열의 유사도를 판별하는 알고리즘
		- 유사도: 임의 문자를 삽입, 삭제, 수정하여 같은 문자열이되는 척도를 의미

  * A[i] == B[j] : 현재 문자는 동일하므로 현재 문자를 제외한 이전 문자열의 편집거리가 현재 문자까지의 편집거리와 동일
		- D[i][j] = D[i - 1][j - 1];

  * A[i] != B[j] : 현재 문자가 다르므로 이전 문자열에서 삽입, 삭제, 수정한 편집거리 중 최소값을 저장
		- D[i][j] = min(D[i - 1][j], min(D[i][j - 1], D[i - 1][j - 1])) + 1;

		1. D[i - 1][j] : 이전 문자열의 편집거리에서 특정 문자 삽입
		2. D[i][j - 1] : 이전 문자열의 편집거리에서 특정 문자 삭제
		3. D[i - 1][j - 1] : 이전 문자열의 편집거리에서 특정 문자 수정
  *-------------------------------------------------------------------------------------------------------------*/

string A, B;
int D[A.size()][B.size()];

for (int i = 0; i < A.size(); i++)
	D[i][0] = i;

for (int j = 0; j < B.size(); j++)
	D[0][j] = j;

for (int i = 0; i < A.size(); i++)
{
	for (int j = 0; j < B.size(); j++)
	{
		if (A[i] == B[j])
			D[i][j] = D[i - 1][j - 1];
		else
			D[i][j] = min(D[i - 1][j], min(D[i][j - 1], D[i - 1][j - 1])) + 1;
	}
}